name: CI/CD Pipeline

on:
  push:
    branches:
      - main   

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build Docker Images for Flask App and SQL
      - name: Build Docker Images
        run: |
          IMAGE_TAG=latest
          docker build -t clo835-flaskapp:$IMAGE_TAG ./flaskapp
          docker build -t clo835-sql:$IMAGE_TAG ./sql

      # Step 5: Tag & Push Docker Images to ECR
      - name: Tag & Push to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=us-east-1

          # Flask App Image
          FLASKAPP_REPO_NAME=flaskapp
          FLASKAPP_ECR_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$FLASKAPP_REPO_NAME"
          docker tag clo835-flaskapp:latest $FLASKAPP_ECR_URI:latest
          docker push $FLASKAPP_ECR_URI:latest

          # SQL Image
          SQL_REPO_NAME=sql
          SQL_ECR_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$SQL_REPO_NAME"
          docker tag clo835-sql:latest $SQL_ECR_URI:latest
          docker push $SQL_ECR_URI:latest
